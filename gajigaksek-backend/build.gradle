plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    // querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // restdocs
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.gjgs'
version = '1.0'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions // restdocs
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

    // iamport
    maven { url 'https://jitpack.io' }
}

ext {
    snippetsDir = file('build/generated-snippets')
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // restdocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // aws
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'

    // jwt
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // redis
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.3.4.RELEASE'

    // embedded redis for test
    testImplementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    // json
    implementation 'com.google.code.gson:gson'

    // swagger
    //implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    //implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa'

    // mysql
    runtimeOnly 'mysql:mysql-connector-java'

    // mockito final class error
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.8.0'

    // query log
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'

    // test docker
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.15.3'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.15.3'
    testImplementation group: 'org.testcontainers', name: 'mysql', version: '1.15.3'

    // fcm
    //implementation group: 'com.google.firebase', name: 'firebase-admin', version: '6.8.1'
    implementation group: 'com.google.firebase', name: 'firebase-admin', version: '8.0.1'


    // iamport
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.15'

    // elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    testImplementation "org.testcontainers:elasticsearch:1.16.0"

    // flyway
    implementation 'org.flywaydb:flyway-core'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

// restdocs
asciidoctor {
    dependsOn test
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir

    sources{
        include("**/*.adoc","**/common/*.adoc")
    }

    baseDirFollowsSourceFile()
}


task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}


build {
    dependsOn copyDocument
}


// query dsl
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}